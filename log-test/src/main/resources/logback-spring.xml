<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="D:/workNote/tmp/logs"/>
    <!-- 定义日志文件名称 -->
    <springProperty scope="context" name="appName" source="spring.application.name"
                    defaultValue="appName"/>
    <springProperty scope="context" name="logLevel" source="logging.level.root"
                    defaultValue="logLevel"/>

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        日志输出格式：
            %d表示日期时间，
            %thread表示线程名，
            %-5level：级别从左显示5个字符宽度
            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
            %msg：日志消息，
            %n是换行符
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${appName}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>20MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>

        <encoder
                class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <pattern>
                    <pattern>
                        {
                        "timestamp": "%d{yyyy-MM-dd HH:mm:ss.SSS}",
                        "level": "%level",
                        "serviceName":"${appName}",
                        "traceid": "%X{traceId}",
                        "spanid": "%X{spanId}",
                        "thread": "%thread",
                        "location":"%logger{50}",
                        "message": "%message",
                        "stackInfo":"%exception{10}"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>

    </appender>

    <!--
        logger主要用于存放日志对象，也可以定义日志类型、级别
        name：表示匹配的logger类型前缀，也就是包的前半部分
        level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
        additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
        false：表示只用当前logger的appender-ref，
        true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!--
        logger是记录Logger对象输出的日志级别的
        　　sercvice实现类引入日志对象可以查看方法的报错信息以及打印sql语句，public static final Logger logger = LoggerFactory.getLogger(SysUserServiceImpl.class);
   　　　生产环境：
　　　　　　　一般把level设为error，可以记录错误的日志信息，毕竟主要是要记录错误信息进行错误定位。
　　　　　开发环境：
　　　　　　　类中引入了logger日志对象时，level级别用info,debug都可以，都有错误信息输出。
　　 -->
    <!-- Spring framework logger -->
    <logger name="org.springframework" level="error" additivity="false"></logger>



    <!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <root level="error">
        <!-- 控制台输出日志-->
        <appender-ref ref="stdout" />
        <!--
        开发环境：
            不需要往文件记录日志，可以把这个appender-ref ref="appLogAppender"注释，上面那个往文件写日志的appender也要注释,不然每天都产生一个空文件；
        生产环境：
            需要往文件记录日志，此时appender-ref ref="appLogAppender"就不能注释了，不然没日志记录到文件，上面那个往文件写日志的appender也要放开。
         -->
        <appender-ref ref="FILE" />
    </root>
</configuration>